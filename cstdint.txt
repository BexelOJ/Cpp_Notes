In C++, the <cstdint> header file provides a variety of fixed-width integer types that are guaranteed to have a specific number of bits, ensuring consistency across different platforms. These types are prefixed with int for signed types and uint for unsigned types, followed by the bit-width.

Here's a list of the common fixed-width integer types defined in <cstdint>:
---------------------------------------------------------
1. Unsigned Integer Types:

uint8_t: 8-bit unsigned integer
Range: 0 to 255 (03)

uint16_t: 16-bit unsigned integer
Range: 0 to 65,535 (05)

uint32_t: 32-bit unsigned integer
Range: 0 to 4,294,967,295 (10)

uint64_t: 64-bit unsigned integer
Range: 0 to 18,446,744,073,709,551,615 (20)

---------------------------------------------------------
2. Signed Integer Types:

int8_t: 8-bit signed integer
Range: -128 to 127

int16_t: 16-bit signed integer
Range: -32,768 to 32,767

int32_t: 32-bit signed integer
Range: -2,147,483,648 to 2,147,483,647

int64_t: 64-bit signed integer
Range: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807

---------------------------------------------------------
3. Integer Types with Larger Sizes (for larger systems):
int_least8_t:   At least 8 bits, signed
int_least16_t:  At least 16 bits, signed
int_least32_t:  At least 32 bits, signed
int_least64_t:  At least 64 bits, signed
uint_least8_t:  At least 8 bits, unsigned
uint_least16_t: At least 16 bits, unsigned
uint_least32_t: At least 32 bits, unsigned
uint_least64_t: At least 64 bits, unsigned

---------------------------------------------------------
4. Integer Types with Largest Sizes (guaranteed to be the largest type available):
int_fast8_t:   Fastest type with at least 8 bits, signed
int_fast16_t:  Fastest type with at least 16 bits, signed
int_fast32_t:  Fastest type with at least 32 bits, signed
int_fast64_t:  Fastest type with at least 64 bits, signed
uint_fast8_t:  Fastest type with at least 8 bits, unsigned
uint_fast16_t: Fastest type with at least 16 bits, unsigned
uint_fast32_t: Fastest type with at least 32 bits, unsigned
uint_fast64_t: Fastest type with at least 64 bits, unsigned

---------------------------------------------------------
5. Integer Types with Specific Size (minimum-width types):

intmax_t: Signed integer type capable of holding the largest integer
uintmax_t: Unsigned integer type capable of holding the largest integer

---------------------------------------------------------

Example of Use:
Cpp Code:
 
#include <iostream>
#include <cstdint>  // Required for fixed-width integer types

int main() {
    uint8_t small = 255;        // 8-bit unsigned integer
    int32_t large = -2147483647; // 32-bit signed integer

    std::cout << "uint8_t value: " << (int)small << std::endl;
    std::cout << "int32_t value: " << large << std::endl;

    return 0;
}#include <iostream>
#include <cstdint>  // Required for fixed-width integer types

int main() {
    uint8_t small = 255;        // 8-bit unsigned integer
    int32_t large = -2147483647; // 32-bit signed integer

    std::cout << "uint8_t value: " << (int)small << std::endl;
    std::cout << "int32_t value: " << large << std::endl;

    return 0;
}

---------------------------------------------------------

Summary Table of All Types:
Type	Description	Size (bits)	Range (signed)	Range (unsigned)
int8_t	Signed 8-bit integer	8	-128 to 127	N/A
uint8_t	Unsigned 8-bit integer	8	N/A	0 to 255
int16_t	Signed 16-bit integer	16	-32,768 to 32,767	N/A
uint16_t	Unsigned 16-bit integer	16	N/A	0 to 65,535
int32_t	Signed 32-bit integer	32	-2,147,483,648 to 2,147,483,647	N/A
uint32_t	Unsigned 32-bit integer	32	N/A	0 to 4,294,967,295
int64_t	Signed 64-bit integer	64	-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807	N/A
uint64_t	Unsigned 64-bit integer	64	N/A	0 to 18,446,744,073,709,551,615
int_least8_t	Signed integer, at least 8 bits	8 or more	-128 to 127	N/A
uint_least8_t	Unsigned integer, at least 8 bits	8 or more	N/A	0 to 255
intmax_t	Largest signed integer type	System dependent	Depends on platform	N/A
uintmax_t	Largest unsigned integer type	System dependent	N/A	Depends on platform

---------------------------------------------------------

Conclusion:
The <cstdint> header provides standardized, fixed-width integer types like uint32_t, int32_t, uint64_t, etc., and ensures consistency in the size and range of integers across different systems.

---------------------------------------------------------
